//@ts-check
/** DescribedSchema  
 * 
 * Object representing the schema of a column in a table.
 * @typedef {object} DescribedSchema
 * @prop {string} table
 * The raw name of the table this field belongs to.
 * @prop {string} field
 * The raw name of the field as it is displayed in the database's table.
 * @prop {string} alias
 * The given alias for MyORM to use. (this is handled internally.)
 * @prop {boolean} isPrimary
 * True if the column is a primary key.
 * @prop {boolean} isIdentity
 * True if the column is an identity key. (automatically increments)
 * @prop {boolean} isVirtual
 * True if the column is virtually generated.
 * @prop {boolean} isNullable
 * True if the column is nullable within the database.
 * @prop {boolean} isUnique
 * True if the column is unique (primary keys can set this to true as well)
 * @prop {"string"|"int"|"float"|"boolean"|"date"} datatype
 * Type that the column represents.
 * @prop {() => ScalarDataType|undefined} defaultValue
 * Function that returns the value specified in the database schema for database generated values on inserts.
 */

/** ScalarDataType
 * 
 * Represents scalar data types in (most) SQL languages.
 * @typedef {ScalarStringDataType|ScalarDateDataType|ScalarNumericDataType} ScalarDataType
 */

/** Decorator
 * 
 * Represents some decoration to a defined column's data type.
 *   __NOTE: MyORM does not depend usage of this type, this is only for improving readability within custom types.__
 * @typedef {PRIMARY<ScalarDataType>
 * |FOREIGN<ScalarDataType, import("./types.js").SqlTable, keyof import("./types.js").SqlTable>
 * |NULLABLE<ScalarDataType>
 * |IDENTITY<ScalarDataType>
 * |UNIQUE<ScalarDataType>
 * |VIRTUAL<ScalarDataType>} Decorator
 */

/** PRIMARY
 * 
 * Decorator that represents some column with the data type, `T`, as the table's primary key.
 *   __NOTE: MyORM does not depend usage of this type, this is only for improving readability within custom types.__
 * @template {ScalarDataType|Decorator} T 
 * Data type of the column.
 * @typedef {T=} PRIMARY 
 */

/** FOREIGN  
 * 
 * Decorator that represents some column with the data type, `T`, as the table's foreign key.
 *   __NOTE: MyORM does not depend usage of this type, this is only for improving readability within custom types.__
 * @template {ScalarDataType|Decorator} T
 * Data type of the column.
 * @template {import('./types.js').SqlTable} TForeignObject 
 * Foreign table that this key relates to.
 * @template {keyof {[K in keyof TForeignObject as TForeignObject[K] extends string|number|undefined ? K : never]}} TForeignKey 
 * Key within the foreign table that this key relates to.
 * @typedef {T=} FOREIGN 
 */

/** NULLABLE  
 * 
 * Decorator that represents some column with the data type, `T`, as a nullable version.
 *   __NOTE: MyORM does not depend usage of this type, this is only for improving readability within custom types.__
 * @template {ScalarDataType|Decorator} T 
 * Data type of the column.
 * @typedef {T=} NULLABLE 
 */

/** DEFAULT
 * 
 * Decorator that represents some column with the data type, `T`, that has a default value, `V`.
 *   __NOTE: MyORM does not depend usage of this type, this is only for improving readability within custom types.__
 * @template {ScalarDataType|Decorator} T 
 * Data type of the column.
 * @template {T} V 
 * Value that the column defaults to.
 * @typedef {T=} DEFAULT 
 */

/** IDENTITY
 * 
 * Decorator that represents some column with the data type, `T`, as a table's primary key that automatically increments.
 *   __NOTE: MyORM does not depend usage of this type, this is only for improving readability within custom types.__
 * @template {ScalarDataType|Decorator} T 
 * Data type of the column.
 * @typedef {T=} IDENTITY 
 */

/** UNIQUE
 * 
 * Decorator that represents some column with the data type, `T`, as unique.
 *   __NOTE: MyORM does not depend usage of this type, this is only for improving readability within custom types.__
 * @template {ScalarDataType|Decorator} T 
 * Data type of the column.
 * @typedef {T} UNIQUE
 */

/** VIRTUAL
 * 
 * Decorator that represents some column with the data type, `T`, as virtual. (value is generated by the database)
 *   __NOTE: MyORM does not depend usage of this type, this is only for improving readability within custom types.__
 * @template {ScalarDataType|Decorator} T 
 * Data type of the column.
 * @typedef {Readonly<T>=} VIRTUAL
 */

/** UNSIGNED
 * 
 * Decorator that represents some column with the numeric data type, `T`, as unsigned. (value is generated by the database)
 *   __NOTE: MyORM does not depend usage of this type, this is only for improving readability within custom types.__
 * @template {ScalarNumericDataType} T 
 * Data type of the column.
 * @typedef {T} UNSIGNED
 */

// STRING DATA TYPES

/** ScalarStringDataType
 * 
 * All scalar string data types.
 *   __NOTE: MyORM does not depend usage of this type, this is only for improving readability within custom types.__
 * @typedef {TINYTEXT
 * |MEDIUMTEXT
 * |LONGTEXT
 * |TEXT<number>
 * |TINYBLOB
 * |MEDIUMBLOB
 * |LONGBLOB
 * |BLOB<number>
 * |CHAR<number>
 * |VARCHAR<number>
 * |BINARY<number>
 * |VARBINARY<number>
 * |ENUM<string|string[]>
 * |SET<string|string[]>} ScalarStringDataType
 */

/** @typedef {string} TINYTEXT */
/** @typedef {string} MEDIUMTEXT */
/** @typedef {string} LONGTEXT */
/** @template {number} T @typedef {string} TEXT */
/** @typedef {string} TINYBLOB */
/** @typedef {string} MEDIUMBLOB */
/** @typedef {string} LONGBLOB */
/** @template {number} T @typedef {string} BLOB */
/** @template {string|string[]} T @typedef {T extends Array ? T[number] : T} ENUM */
/** @template {string|string[]} T @typedef {T extends Array ? T[number] : T} SET */
/** @template {number} [T=1] @typedef {string} CHAR */
/** @template {number} T @typedef {string} VARCHAR */
/** @template {number} T @typedef {string} BINARY */
/** @template {number} T @typedef {string} VARBINARY */

// DATE DATA TYPES

/** ScalarDateDataType  
 * 
 * All scalar Date data types.
 *   __NOTE: MyORM does not depend usage of this type, this is only for improving readability within custom types.__
 * @typedef {DATE|YEAR|DATETIME<string>|TIMESPAN<string>|TIME<string>} ScalarDateDataType 
 */

/** @typedef {Date} DATE */
/** @typedef {Date} YEAR */
/** @template {string} [T=string] @typedef {Date} DATETIME */
/** @template {string} [T=string] @typedef {Date} TIMESPAN */
/** @template {string} [T=string] @typedef {Date} TIME */

// NUMERIC DATA TYPES

/** 
 * All scalar numerical data types.
 *   __NOTE: MyORM does not depend usage of this type, this is only for improving readability within custom types.__
 * @typedef {BIT<IntRange0to63>
 * |TINYINT<IntRange0to255>
 * |BOOL
 * |BOOLEAN
 * |SMALLINT
 * |MEDIUMINT
 * |BIGINT
 * |INT
 * |FLOAT
 * |FLOAT4
 * |FLOAT8
 * |DOUBLE
 * |DOUBLE_PRECISION
 * |DECIMAL<IntRange0to65,IntRange0to30>
 * |DEC<IntRange0to65,IntRange0to30>} ScalarNumericDataType 
 * */

/** @template {IntRange0to63} [TSize=1] @typedef {TSize extends 1 ? boolean : number} BIT */
/** @template {IntRange0to255} [TSize=1] @typedef {number} TINYINT */
/** @typedef {boolean} BOOL */
/** @typedef {boolean} BOOLEAN */
/** @typedef {number} SMALLINT */
/** @typedef {number} MEDIUMINT */
/** @typedef {bigint} BIGINT */
/** @typedef {number} INT */
/** @typedef {number} FLOAT */
/** @typedef {number} FLOAT4 */
/** @typedef {number} FLOAT8 */
/** @typedef {number} DOUBLE */
/** @typedef {number} DOUBLE_PRECISION */
/** @template {IntRange0to65} [TSize=10] @template {IntRange0to30} [TDecimalSize=0] @typedef {number} DECIMAL */
/** @template {IntRange0to65} [TSize=10] @template {IntRange0to30} [TDecimalSize=0] @typedef {number} DEC */
/** @typedef {0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30} IntRange0to30 */
/** @typedef {0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|33|34|35|36|37|38|39|40|41|42|43|44|45|46|47|48|49|50|51|52|53|54|55|56|57|58|59|60|61|62|63} IntRange0to63 */
/** @typedef {0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|33|34|35|36|37|38|39|40|41|42|43|44|45|46|47|48|49|50|51|52|53|54|55|56|57|58|59|60|61|62|63|64|65|66|67|68|69|70|71|72|73|74|75|76|77|78|79|80|81|82|83|84|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|219|220|221|222|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255} IntRange0to255 */
/** @typedef {IntRange0to63|64|65} IntRange0to65 */

export const SchemaTypes = {};